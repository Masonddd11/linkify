// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String? // Optional for OAuth users
  username    String    @unique
  googleId    String?   @unique // For Google OAuth
  image       String?
  sessions    Session[]
  isOnboarded Boolean   @default(false)

  /// Relation
  UserProfile UserProfile? // One user has one user info
}

model Session {
  id        String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model UserProfile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  slug        String?      @unique
  displayName String?
  bio         String?
  socialLinks SocialLink[]
  widgets     Widget[]
}

enum PLATFORM {
  INSTAGRAM
  TWITTER
  TIKTOK
  YOUTUBE
  LINKEDIN
  GITHUB
  FACEBOOK
  TWITCH
  REDDIT
  SOUNDCLOUD
  SPOTIFY
  VK
  DRIBBBLE
}

model SocialLink {
  id        String      @id @default(uuid())
  profile   UserProfile @relation(fields: [profileId], references: [id])
  profileId Int
  platform  PLATFORM
  handle    String
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum WIDGET_TYPE {
  TEXT
  LINK
  IMAGE
  EMBED
  SOCIAL
}

enum WIDGET_SIZE {
  SMALL
  MEDIUM
  LARGE
  WIDE
  EXTRA_LARGE
}

/// JSON schema for TEXT widget content:
/// {
///   text: string
///   color?: string
/// }
///
/// JSON schema for LINK widget content:
/// {
///   url: string
///   title: string
///   description?: string
///   thumbnail?: string
/// }
///
/// JSON schema for IMAGE widget content:
/// {
///   url: string
///   alt?: string
/// }
///
/// JSON schema for EMBED widget content:
/// {
///   embedUrl: string
///   type: "youtube" | "spotify" | "other"
/// }
///
/// JSON schema for SOCIAL widget content:
/// {
///   platform: string
///   username: string
///   profileUrl: string
/// }
model Widget {
  id        String      @id @default(cuid())
  type      WIDGET_TYPE
  size      WIDGET_SIZE
  position  Int
  profile   UserProfile @relation(fields: [profileId], references: [id])
  profileId Int

  // Content relations (only one will be non-null based on type)
  textContent    TextContent?
  linkContent    LinkContent?
  imageContent   ImageContent?
  embedContent   EmbedContent?
  socialContent  SocialContent?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextContent {
  id      String  @id @default(cuid())
  text    String
  color   String?
  widget  Widget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId String @unique
}

model LinkContent {
  id          String  @id @default(cuid())
  url         String
  title       String
  description String?
  thumbnail   String?
  widget      Widget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId    String @unique
}

model ImageContent {
  id       String  @id @default(cuid())
  url      String
  alt      String?
  widget   Widget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId String @unique
}

model EmbedContent {
  id       String  @id @default(cuid())
  embedUrl String
  type     EmbedType
  widget   Widget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId String @unique
}

model SocialContent {
  id         String  @id @default(cuid())
  platform   String
  username   String
  profileUrl String
  widget     Widget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)
  widgetId   String @unique
}

enum EmbedType {
  YOUTUBE
  SPOTIFY
  OTHER
}

